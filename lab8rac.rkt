;Символьне диференціювання
(define (variable? x) (symbol? x))
(define (same-variable? v1 v2)
  (and (variable? v1) (variable? v2) (eq? v1 v2)))
(define (make-sum a1 a2) (list '+ a1 a2))
(define (make-product m1 m2) (list '* m1 m2))
(define (make-pow p1 p2) (list 'expt p1 p2))
(define (make-divide d1 d2) (list '/ d1 d2))
(define (make-sinus s1) (list 'sin s1))
(define (make-cosinus c1) (list 'cos c1))
(define (sum? x)
  (and (pair? x) (eq? (car x) '+)))
(define (addend s) (cadr s))
(define (augend s) (caddr s))
(define (product? x)
  (and (pair? x) (eq? (car x) '*)))
(define (multiplier p) (cadr p))
(define (multiplicand p) (caddr p))
(define (pow? x)
  (and (pair? x) (eq? (car x) 'expt)))
(define (base p) (cadr p))
(define (exponent p) (caddr p))
(define (divide? x)
  (and (pair? x) (eq? (car x) '/)))
(define (num p) (cadr p))
(define (denom p) (caddr p))
(define (sinus? x)
  (and (pair? x) (eq? (car x) 'sin)))
(define (val p) (cadr p))
(define (cosinus? x)
  (and (pair? x) (eq? (car x) 'cos)))
(define (val p) (cadr p))
(define (deriv exp var)
  (cond ((number? exp) 0)
    ((variable? exp)
     (if (same-variable? exp var) 1 0))
    ((sum? exp)
     (make-sum (deriv (addend exp) var)
               (deriv (augend exp) var)))
    ((product? exp)
     (make-sum
       (make-product (multiplier exp)
                     (deriv (multiplicand exp) var))
       (make-product (deriv (multiplier exp) var)
                     (multiplicand exp))))
     ((pow? exp)
     (make-product (exponent exp)
                   (make-pow (base exp) (- (exponent exp) 1))))
     ((divide? exp)
     (make-divide (make-sum (make-product (deriv (num exp) var) (denom exp)) (make-product (make-product (num exp) (deriv (denom exp) var)) -1))
                   (make-pow (denom exp) 2)))
     ((sinus? exp)
     (make-cosinus (val exp)))
     ((cosinus? exp)
     (make-product -1 (make-sinus (val exp))))
    (else
     (display "unknown expression type - DERIV" ))))

(deriv '(/ (sin 6) x) 'x)